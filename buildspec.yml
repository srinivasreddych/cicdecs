version: 0.2

env:
  variables:
    ECS_Cluster: "appmesh-cicd"
    ECS_Service1: "appmesh-cicd-ecs-colorapp-ColorTellerWhiteService-2C5JP3FQUQ22"
    ECS_Service2: "appmesh-cicd-ecs-colorapp-ColorTellerBlackService-12JSJ7DU5PICZ"
    AppMesh_Name: "appmesh-mesh"
    VirtualService: "colorteller.demo.local"

phases:
  install:
    runtime-versions:
      docker: 18
  pre_build:
    commands:
      - echo Logging in to Amazon ECR...
      - $(aws ecr get-login --no-include-email --region $AWS_DEFAULT_REGION)
      - IMAGE_TAG=${COMMIT_HASH:=latest}
      # Get TaskDef details from DescribeServices API call
      - export taskDef = $(aws ecs describe-services --cluster ${ECS_Cluster} --services $(ECS_Service1) --query 'services[0].deployments[0].taskDefinition' --output text | awk -F '/' '{print $2}')
      #Extracting AppMesh Virtual Router, Virtual Route and Virtual Node details.
      - export virtualRouter = $(aws appmesh describe-virtual-service --mesh-name ${AppMesh_Name} --virtual-service-name ${VirtualService} --query 'virtualService.spec.provider.virtualRouter.virtualRouterName' --output text
      - export virtualRoute = $(aws appmesh list-routes --mesh-name ${AppMesh_Name} --virtual-router-nam ${virtualRouter}
      - export virtualNode1 = $(aws appmesh describe-route --mesh-name ${AppMesh_Name} --virtual-router-name ${virtualRouter} --route-name ${describeRoute} --query 'route.spec.httpRoute.action.weightedTargets[*].virtualNode' --output text | awk -F " " '{print $1}'
      - export virtualNode2 = $(aws appmesh describe-route --mesh-name ${AppMesh_Name} --virtual-router-name ${virtualRouter} --route-name ${describeRoute} --query 'route.spec.httpRoute.action.weightedTargets[*].virtualNode' --output text | awk -F " " '{print $2}'
  build:
    commands:
      - echo Build started on `date`
      - echo Building the Docker image...          
      - docker build -t $IMAGE_REPO_NAME:$IMAGE_TAG .
      - docker tag $IMAGE_REPO_NAME:$IMAGE_TAG $AWS_ACCOUNT_ID.dkr.ecr.$AWS_DEFAULT_REGION.amazonaws.com/$IMAGE_REPO_NAME:$IMAGE_TAG 
      - imageUri = $($AWS_ACCOUNT_ID.dkr.ecr.$AWS_DEFAULT_REGION.amazonaws.com/$IMAGE_REPO_NAME:$IMAGE_TAG)
      - echo Pushing the Docker image...
      - docker push $AWS_ACCOUNT_ID.dkr.ecr.$AWS_DEFAULT_REGION.amazonaws.com/$IMAGE_REPO_NAME:$IMAGE_TAG
  post_build:
    commands:
    #Creating a new TaskDef
      - describeTaskDef = $(aws ecs describe-task-definition --task-definition "$taskDef")
      - NEW_TASK_DEFINTIION=$(echo $describeTaskDef | jq --arg IMAGE "$imageUri" '.taskDefinition | .containerDefinitions[0].image = $IMAGE | del(.taskDefinitionArn) | del(.revision) | del(.status) | del(.requiresAttributes) | del(.compatibilities)')
      - NEW_TASK_INFO=$(aws ecs register-task-definition --region "$AWS_DEFAULT_REGION" --cli-input-json "$NEW_TASK_DEFINTIION")
      - latestRevision=$(echo $NEW_TASK_INFO | jq '.taskDefinition.revision')
      - printf '[{"ECS_Cluster":"%s","ECS_Service1":"%s","ECS_Service2":"%s","AppMesh_Name":"%s","VirtualService":"%s","virtualRouter":"%s","virtualRoute":"%s","virtualNode1":"%s","virtualNode2":"%s","latestRevision":"%s"}]' "$ECS_Cluster" "$ECS_Service1" "$ECS_Service2" "$AppMesh_Name" "$VirtualService" "$virtualRouter" "$virtualRoute" "$virtualNode1" "$virtualNode2", "$latestRevision" > imagedefinitions.json
